\import Path

\record Precategory
  | carrier : \Type
  | hom : \Pi (x y : carrier) -> \Set
  | id : \Pi (x : carrier) -> hom x x
  | c : \Pi {x y z : carrier} (h : hom x y) (w : hom y z) -> hom x z
  | left : \Pi {x y : carrier} (f : hom x y) -> c (id x) f = f
  | right : \Pi {x y : carrier} (f : hom x y) -> c f (id y) = f
  | assoc : \Pi {x y z w : carrier} (f : hom x y) (g : hom y z) (h : hom z w) -> c (c f g) h = c f (c g h)

\record Catgroupoid \extends Precategory
  | inv : \Pi {x y : carrier} -> hom x y -> hom y x
  | inv-left : \Pi {x y : carrier} (p : hom x y) -> c p (inv p) = id x
  | inv-right : \Pi {x y : carrier} (p : hom x y) -> c (inv p) p = id y

\record iso
  | C : Precategory
  | A : C.carrier
  | B : C.carrier
  | f : C.hom A B
  | g : C.hom B A
  | section : C.c f g = C.id A
  | recract : C.c g f = C.id B

\func isCategory (C : Precategory) : \Type => \Pi (A : C.carrier) -> isContr (\Sigma (B : C.carrier) (iso C A B))

\func category : \Type => \Sigma (C : Precategory) (isCategory C)

\func isInitial (C : Precategory) (bot : C.carrier) : \Type => \Pi (x : C.carrier) -> isContr (C.hom bot x)

\func isTerminal (C : Precategory) (top : C.carrier) : \Type => \Pi (x : C.carrier) -> isContr (C.hom x top)

\func initial (C : Precategory) => \Sigma (bot : C.carrier) (isInitial C bot)

\func terminal (C : Precategory) => \Sigma (top : C.carrier) (isTerminal C top)

\func isComm (X : Precategory) (A B C D : X.carrier)
             (f : X.hom A B) (g : X.hom C D) (h : X.hom A C) (i : X.hom B D) => X.c h g = X.c f i
