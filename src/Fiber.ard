\import Connection
\import Iso
\import Path
\import Univ

\func family (B : \Type) : \Type
   => B -> \Type

\func total {B : \Type} (F : family B) : \Type
   => \Sigma (x : B) (F x)

\func trivial {B : \Type} (F : family B) : total F -> B
   => \lam (x : total F) => x.1

\func fiber {A B : \Type} (f : A -> B) (base : B) : \Type
   => \Sigma (x : A) (f x = base)

\func encode {B : \Type} (F : B -> \Type) {y : B}
      (x : fiber (trivial F) y) : F y
   => transport F x.2 x.1.2

\func decode {B : \Type} (F : B -> \Type) {y : B}
      (x : F y) : fiber (trivial F) y
   => ((y, x), rfl)

\func decode->encode {B : \Type} (F : family B) {y : B}
   (x : F y) : encode F (decode F x) = x
   => rfl

\func encode->decode' {B : \Type} (F : family B) {y : B} (x : B) (f : F x) (p : trivial F (x, f) = y)
    : decode F (encode F ((x, f), p)) = ((x, f), p)
    | F, x, f, idp => idp

\func encode->decode {B : \Type} (F : family B) {y : B}
   (x : fiber (trivial F) y) : decode F (encode F x) = x
  => encode->decode' F x.1.1 x.1.2 x.2

\func hFiber=DependentTypeParameterized {B : \Type} (F : family B) (y : B) :
   fiber (trivial F) y = F y
   => Iso=>Path
      (\new Iso
         (fiber (trivial F) y) (F y)
         (encode F) (decode F)
         (encode->decode F) (decode->encode F))

\func Fibration=DependentType {B : \Type} (F : family B) : (fiber (trivial F)) = F
   => funext-nondep (hFiber=DependentTypeParameterized F)