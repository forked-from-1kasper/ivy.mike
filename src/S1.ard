
\import Path \import Int

\data S1
   | base
   | loop I \with {
      | left => base
      | right => base
   }

\func loopS1 : \Type => base = base
\func loopP : loopS1 => path loop
\func invLoop : base = base => path (\lam i => loop (negate i))

\func triv : base = base
   => rfl

\func one-turn (x : base = base) : base = base
   => x # loopP

\func back-turn (x : base = base) : base = base
   => x # inv loopP

\func code (x : S1) : \Set
   | base => Int
   | loop i => iso isuc ipred ipred-isuc isuc-ipred i

\func encode (x : S1) (p : base = x) => transport code p 0

\func winding => encode base

\func wind (x : Int) : loopS1
   | pos 0 => idp
   | pos (suc n) => wind (pos n) # loopP
   | Int.neg (suc n) => wind (Int.neg n) # inv loopP

\func decode (x : S1) : code x -> base = x \elim x
   | base => wind
   | loop i => pathOverFamily (path (\lam j x => decode-loop x @ j)) @ i
   \where {
      \func wind-loop (n : Int) : wind n # loopP = wind (isuc n)
         | pos _ => idp
         | Int.neg (suc n) => inv (comp-assoc (wind (Int.neg n)) (inv loopP) loopP) # cong (wind (Int.neg n) #) (comp-inv-path loopP)

      \func decode-loop (x : Int) =>
         comp-pi code (base =) loopP wind x
            # comp-path-right loopP (wind (transport code (inv loopP) x))
            # cong (`# loopP) (cong wind (comp-inv-func code loopP ipred ipred-isuc x))
            # wind-loop (ipred x)
            # cong wind (isuc-ipred x)
   }

\func encode-decode {x : S1} (p : base = x) : decode x (encode x p) = p
   | idp => idp

\func encode-wind (x : Int) : encode base (wind x) = x
   | pos (suc m) =>
      comp-# code (wind (pos m)) loopP 0 # cong (transport code loopP) (encode-wind (pos m))
   | pos zero => idp
   | Int.neg (suc m) =>
      comp-# code (wind (Int.neg m)) (inv loopP) 0
         # cong (transport code (inv loopP)) (encode-wind (Int.neg m))
         # comp-inv-func code loopP ipred ipred-isuc (Int.neg m)

\func decode-encode (x : S1) (c : code x) : encode x (decode x c) = c \elim x
   | base => encode-wind c

\func loop-S1 : loopS1 = Int =>
   path (iso winding wind encode-decode encode-wind)
