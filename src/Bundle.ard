\import Connection
\import Iso
\import Path
\import Univ

\func family (B : \Type) : \Type => B -> \Type

\func total (B : \Type) (F : family B) : \Type => \Sigma (x : B) (F x)

\func trivial (B : \Type) (F : family B) : total B F -> B => \lam (x : total B F) => x.1

\func fiber (A B : \Type) (f : A -> B) (base : B)
   => \Sigma (x : A) (f x = base)

\func homeo (B E : \Type) (F : family B) (p : E -> B) (y : B) : \Pi (x : F y) -> fiber E B p y -> total B F =>
  \lam (x : F y) => \lam (fib : fiber E B p y) => (fib.2 @ left, transport F (inv fib.2) x)

\func encode (B : \Type) (F : B -> \Type) (y : B) :
      fiber (total B F) B (trivial B F) y -> F y
   => \lam (x : fiber (total B F) B (trivial B F) y)
   => subst B F x.1.1 y x.2 x.1.2

\func decode (B : \Type) (F : B -> \Type) (y : B) :
      F y -> fiber (total B F) B (trivial B F) y
   => \lam (x : F y) => ((y, x), path (\lam i => y))

\func decode->encode (B : \Type) (F : family B) (y : B) :
  \Pi (x : F y) -> (encode B F y (decode B F y x)) = x
  => \lam (x : F y) => path (\lam i => encode B F ((decode B F y x).2 @ i) ((y, x), (path (\lam _ => y))))

-- TODO
-- x : fiber (total B F) B (trivial B F) y
--                                        (\lam (c : \Sigma (d : B) F d) => d) a = y
-- x : \Sigma (a : \Sigma (b : B) (F b)) ((trivial B F) a = y)
\func encode->decode (B : \Type) (F : family B) (y : B) :
  \Pi (x : fiber (total B F) B (trivial B F) y) -> (decode B F y (encode B F y x)) = x
  => \lam (x : fiber (total B F) B (trivial B F) y) => path (\lam i => {?})

\func TrivialFiberBundle=PiType (B : \Type) (F : family B) (y : B) : (fiber (total B F) B (trivial B F) y) = (F y)
  => Iso=>Path (\new Iso (fiber (total B F) B (trivial B F) y) (F y) (encode B F y) (decode B F y) (encode->decode B F y) (decode->encode B F y))