
\import Proto \import Connection

\func coercion (i k : I) (A : I -> \Type) : A i -> A k
   => coe (\lam i => A i -> A k) (\lam x => coe A x k) i

\func refl {A : \Type} (a : A) : a = a
   => path (\lam i => a)

\func rfl {A : \Type} {a : A} : a = a
   => path (\lam i => a)

\func HConnAnd {A : \Type} {a b : A} (p : a = b) :
   Path (\lam i => a = p @ i) rfl p
   => path (connAnd p)

\func HConnOr {A : \Type} {a b : A} (p : a = b) :
   Path (\lam i => p @ i = b) p rfl
   => path (connOr p)

\func trans {A B : \Type} (p : A = B) : A -> B
   => coercion left right (@ p)

\func trans-comp {A : \Type} (a : A) : a = trans (refl A) a
   => rfl

\func transNeg {A B : \Type} (p : A = B) : B -> A
   => coercion right left (@ p)

\func transK {A B : \Type} (p : A = B) (x : A) : x = transNeg p (trans p x)
   => path (\lam i => coercion i left (@ p)
                     (coercion left i (@ p) x))

\func coerce {A B : \Type} (p : A = B) : A -> B
   => trans p

\func transport {A : \Type} (B : A -> \Type) {a b : A} (p : a = b) (x : B a) : B b
   => coercion left right (\lam i => B (p @ i)) x

\func subst (A : \Type) (B : A -> \Type) (a b : A) (p : a = b) (x : B a) : B b
   => coercion left right (\lam i => B (p @ i)) x

\func HPath {A B : \Type} (a : A) (b : B) (P : A = B) : \Type
   => trans P a = b

\func singl (A : \Type) (a : A) : \Type
   => \Sigma (x : A) (a = x)

\func theta (A : \Type) (a : A) : singl A a
   => (a, refl a)

\func inv {A : \Type} {a b : A} (p : a = b) : b = a
   => coercion right left (\lam i => b = p @ i) rfl

\func seg : left = right => path idfun

\func neg (i : I) : I \elim i
   | left => right
   | right => left
   | i => inv seg @ i

\func \infixl 5 # {A : \Type} {a b c : A} (p : a = b) (q : b = c) : a = c
   => concatOverFamily p q
       \where
          \func concatOverFamily {A : I -> \Type} {a : A left} {a' a'' : A right} (p : Path A a a') (q : a' = a'') : Path A a a'' =>
             transport (Path A a) q p

\func kan {A : \Type} {a b c d : A} (bottom : a = b)
   (left : a = c) (right : b = d) : c = d
   => inv left # bottom # right

{-       u
    a ------> b
    |         |
  p |         | q
    |         |
    V         V
    c ------> d
         v       -}
\func Square {A : \Type} {a b c d : A}
   (u : a = b) (v : c = d) (p : a = c) (q : b = d)
   => Path (\lam i => u @ i = v @ i) p q

\func pathOverFamily {A : I -> \Type} {a : A left} {a' : A right} (p : coe A a right = a') : Path A a a' =>
   #.concatOverFamily (path (coe A a)) p

-- Groupoid Interpretation

\func refl-left {A : \Type} {a b : A} (p : a = b) : rfl # p = p
   => J (\lam _ p => rfl # p = p) rfl p

\func refl-right {A : \Type} {a b : A} (p : a = b) : p # rfl = p
   => coercion left right (\lam i => connAnd p i # rfl = connAnd p i) rfl

\func comp-path-inv {A : \Type} {a b : A} (p : a = b) : p # inv p = rfl
   => coercion left right (\lam i => connAnd p i # inv (connAnd p i) = rfl)
      rfl

\func comp-inv-path {A : \Type} {a b : A} (p : a = b) : inv p # p = rfl
   => coercion left right (\lam i => inv (connAnd p i) # connAnd p i = rfl)
      rfl

\func cong {A B : \Type} (f : A -> B) {a b : A} (p : a = b) : f a = f b
   => path (\lam i => f (p @ i))

\func contr (A : \Type) (a b : A) (p : a = b) : theta A a = (b, p)
   => path (\lam i => (p @ i, path (\lam j => p @ meet i j)))

\func coe_path {A : \Type} {a1 a2 a3 a4 : A} (p : a2 = a1) (q : a2 = a3) (r : a3 = a4)
   : coe (\lam i => p @ i = r @ i) q right = (inv p # (q # r))
   => coe (\lam j => coe (\lam i => p @ i = r @ i) q j = (inv (connAnd p j) # (q # connAnd r j)))
          (inv (refl-left q)) right

\func D (A : \Type) : \Type => \Pi (x y : A) -> x = y -> \Type

\func J {A : \Type} {a : A} (C : \Pi (x : A) -> a = x -> \Type)
        (d : C a (refl a)) {x : A} (p : a = x) : C x p
-- => coe (\lam i => C (p @ i) (connAnd p i)) d right -- normal form
   => subst (singl A a) (\lam x => C x.1 x.2) (theta A a) (x, p) (contr A a x p) d

\func inv_inv {A : \Type} {a a' : A} (p : a = a') : inv (inv p) = p =>
   J (\lam _ p => inv (inv p) = p) rfl p

\func comp-assoc {A : \Type} {a b c d : A}
   (p : a = b) (q : b = c) (r : c = d) : p # (q # r) = (p # q) # r
   => \let | enclose-left => refl-right (p # q)
           | enclose-right => cong (# p) (refl-right q)
      \in J (\lam _ r => p # (q # r) = (p # q) # r)
            (enclose-right # inv enclose-left) r

\func inv-J {A : \Type} {a b : A} (p : a = b) : b = a
   => J (\lam x _ => x = a) rfl p

\func n-groupoid (A : \Type) (n : Nat) : \Type => \Pi (a b : A) -> rec a b n
   \where \func rec {A : \Type} (a b : A) (k : Nat) : \Type
   \elim k { | zero => a = b | suc n => n-groupoid (a = b) n }

\func isContr     (A : \Type) : \Type => \Sigma (x : A) (\Pi (y : A) -> x = y)
\func isProp      (A : \Type) : \Type => n-groupoid A 0
\func isSet       (A : \Type) : \Type => n-groupoid A 1
\func isGroupoid  (A : \Type) : \Type => n-groupoid A 2
\func isGrp2      (A : \Type) : \Type => n-groupoid A 3
\func isGrp3      (A : \Type) : \Type => n-groupoid A 4

\func Prop     : \Type => \Sigma (X : \Type) (isProp X)
\func Set      : \Type => \Sigma (X : \Type) (isSet X)
\func Groupoid : \Type => \Sigma (X : \Type) (isGroupoid X)

\func K (A : \Type) => \Pi {a : A} (p : a = a) -> p = rfl

\func homotopy {A : \Type} (C : A -> \Type) (f g : \Pi (x : A) -> C x)
   => \Pi (x : A) -> f x = g x

\func funext {A : \Type} {C : A -> \Type} (f g : \Pi (x : A) -> C x)
   (p : homotopy C f g) : f = g
   => path (\lam i x => (p x) @ i)

\func I-ind (C : I -> \Type) {b0 : C left} {b1 : C right} (s : Path C b0 b1)
   (i : I) : C i \elim i
   | left => b0
   | right => b1
   | i => s @ i

\data No
   | implicit I
   \where {
      \func i0 => implicit left
      \func i1 => implicit right
      \func seg : i0 = i1 => path implicit
   }
