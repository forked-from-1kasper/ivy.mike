
\import Proto \import Path \import Equiv \import Int

\data Graph (edges : Nat -> Nat -> \Type)
   | node (n : Nat)
   | line (n m : Nat) (condition : edges n m) I \with {
      | n, _, _, left => node n
      | _, m, _, right => node m
   }

\func isInGraph {edges : Nat -> Nat -> \Type} (a : Graph edges)
   => \Sigma (b : Graph edges) (H : a =/= b) (a = b)

\func Point-space (edges : Nat -> Nat -> \Type)
   => \Sigma (a : Graph edges) (isInGraph a)

\func isConnected (edges : Nat -> Nat -> \Type)
   => isProp (Point-space edges)

\func isAcyclic (edges : Nat -> Nat -> \Type)
   => K (Graph edges)

\func isCycle {edges : Nat -> Nat -> \Type} {a : Graph edges} (p : a = a)
   => p =/= rfl

\record isNotEulerian {edges : Nat -> Nat -> \Type} {a b : Graph edges} (p : a = b) {
   | half-way : Graph edges
   | first-part : a = half-way
   | second-part : half-way = b
   | loop : half-way = half-way
   | loop-is-cycle : isCycle loop
   | split : first-part # loop # second-part = p
}

\func isPathCover {edges : Nat -> Nat -> \Type} {a b : Graph edges}
   (p : a = b) (c : Graph edges)
   => \Sigma (q : a = c) (r : c = b) (q # r = p)

\func coverAll {edges : Nat -> Nat -> \Type} {a b : Graph edges} (p : a = b)
   => \Pi (x : Graph edges) -> isInGraph x -> isPathCover p x

\func Koenigsberg-edges (n m : Nat) : \Type \elim n, m
   | 0, 1 => unit
   | 1, 2 => unit
   | 1, 3 => unit
   | 0, 2 => bool
   | 0, 3 => bool
   | _, _ => empty

\func Koenigsberg-statement (a : Graph Koenigsberg-edges)
   => \Pi (p : a = a) -> coverAll p -> isCycle p -> isNotEulerian p