
\import Path \import Proto

\data Simplex (n : Nat) \elim n
   | suc n => {
      | base
      | lift (x : Simplex n)
      | glue (x : Simplex n) I \with {
         | _, left => base
         | x, right => lift x
      }
   }

\data Trunc (A : \Type)
   | elem A
   | uniq (x y : Trunc A) (i : I) \elim i {
      | left => x
      | right => y
   }

\func IteratedUnit (n : Nat) : \Type \elim n
   | 0 => empty
   | suc n => either unit (IteratedUnit n)

\func FilledSimplex (n : Nat)
   => Trunc (IteratedUnit n)

\func Interval => Simplex 2
   \where {
      \func left : Interval => base
      \func right : Interval => lift base
      \func seg : left = right => path (glue base)
   }

\func Triangle => Simplex 3
   \where {
      \func left : Triangle => base
      \func right : Triangle => lift base
      \func up : Triangle => lift (lift base)

      \func left-right : left = right => path (glue base)
      \func right-up : right = up => cong lift Interval.seg
      \func left-up : left = up => path (glue (lift base))
   }