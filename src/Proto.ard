
-- Function type

\func id {A : \Type}
   => \lam (x : A) => x

\func -o {A B C : \Type} (f : A -> B)
   => \lam (g : B -> C) x => g (f x)

\func o- {A B C : \Type} (g : B -> C)
   => \lam (f : A -> B) x => g (f x)

\func \infixr 8 o {A B C : \Type} (g : B -> C) (f : A -> B)
   => \lam x => g (f x)

-- Empty type

\data empty

\func emptyRec {A : \Type} : empty -> A
   => \lam (x : empty) => \case x \with { }

\func emptyInd {C : empty -> \Type} : \Pi (z : empty) -> C z
   => \lam (x : empty) => \case x \with { }

-- Unit type

\data unit | tt

\func unitRec {C : \Type} (x : C) : unit -> C => \lam (y : unit)
   => \case y \with { | tt => x }

\func unitInd {C : unit -> \Type} (x : C tt) (y : unit) : C y
   \elim y { | tt => x }

-- Tuple type

\data tuple (A B : \Type) | pair (a : A) (b : B)

\func fst {A B : \Type} (c : tuple A B) : A
    \elim c { | pair a b => a }

\func snd {A B : \Type} (c : tuple A B) : B
    \elim c { | pair a b => b }

\func tupleRec {A B C : \Type} (c : \Pi (x : A) (y : B) -> C) : \Pi (x : tuple A B) -> C
   => \lam (x : tuple A B) => \case x \with { | pair a b => c a b }

\func tupleInd {A B : \Type} (C : tuple A B -> \Type)
      (c : \Pi (x : A) (y : B) -> C (pair x y)) (z : tuple A B) : C z
    \elim z { | pair a b => c a b }

-- Either type

\data either (A B : \Type) | inl (a : A) | inr (b : B)

\func eitherRec {A B C : \Type} (b : A -> C) (c : B -> C) : either A B -> C
   => \lam (z : either A B) => \case z \with { | inl x => b x | inr y => c y }

\func eitherInd {A B : \Type} (C : either A B -> \Type)
      (x : \Pi (a : A) -> C (inl a))
      (y : \Pi (b : B) -> C (inr b))
      (z : either A B) : C z
    \elim z { | inl i => x i | inr j => y j }

-- Exists type

\data exists (A : \Type) (B : A -> \Type) | sig (a : A) (b : B a)

\func pr1 {A : \Type} {B : A -> \Type} (x : exists A B) : A
    \elim x { sig a b => a }

\func pr2 {A : \Type} {B : A -> \Type} (x : exists A B) : B (pr1 x)
    \elim x { sig a b => b }

